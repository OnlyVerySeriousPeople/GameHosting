// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: player_service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "players";

export interface Player {
  id: number;
  username: string;
  email: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface PlayerExpanded {
  id: number;
  username: string;
  email: string;
  statistics: PlayerStatistics | undefined;
  achievements: PlayerAchievement[];
  featuredGames: FeaturedGame[];
}

export interface UpdatePlayerInput {
  id: number;
  username: string;
  email: string;
}

export interface CreatePlayerRequest {
  username: string;
  email: string;
}

export interface GetPlayerRequest {
  id?: number | undefined;
  username?: string | undefined;
  expanded: boolean;
}

export interface GetAllPlayersRequest {
}

export interface UpdatePlayerRequest {
  player: UpdatePlayerInput | undefined;
  updateMask: string[] | undefined;
}

export interface DeletePlayerRequest {
  id?: number | undefined;
  username?: string | undefined;
}

export interface CreatePlayerResponse {
  player: Player | undefined;
}

export interface GetPlayerResponse {
  player?: Player | undefined;
  playerExpanded?: PlayerExpanded | undefined;
}

export interface UpdatePlayerResponse {
  player: Player | undefined;
}

export interface DeletePlayerResponse {
  success: boolean;
}

export interface GetAllPlayersResponse {
  players: Player[];
}

export interface PlayerStatistics {
  id: number;
  playerId: number;
  totalGamesPlayed: number;
  completedGames: number;
}

export interface GetPlayerStatisticsRequest {
  playerId: number;
}

export interface GetPlayerStatisticsResponse {
  playerStatistics: PlayerStatistics | undefined;
}

export interface PlayerAchievement {
  id: number;
  playerId: number;
  title: string;
  description: string;
  achievedAt: Date | undefined;
}

export interface GetPlayerAchievementProgressRequest {
  playerId: number;
  achievementId: number;
}

export interface GetPlayerAchievementProgressResponse {
  current: number;
  required: number;
}

export interface GetAllPlayerAchievementsRequest {
  playerId: number;
}

export interface GetAllPlayerAchievementsResponse {
  playerAchievements: PlayerAchievement[];
}

export interface Achievement {
  id: number;
  title: string;
  description: string;
  statTarget: string;
  operator: string;
  threshold: number;
}

export interface GetAchievementByIdRequest {
  id: number;
}

export interface GetAchievementByTitleRequest {
  title: string;
}

export interface GetAchievementResponse {
  achievement: Achievement | undefined;
}

export interface GetAllAchievementsRequest {
}

export interface GetAllAchievementsResponse {
  achievements: Achievement[];
}

export interface FeaturedGame {
  playerId: number;
  gameId: number;
}

export interface AddGameToFeaturedRequest {
  playerId: number;
  gameId: number;
}

export interface AddGameToFeaturedResponse {
  success: boolean;
}

export interface GetAllFeaturedGamesOfPlayerRequest {
  playerId: number;
}

export interface GetAllFeaturedGamesOfPlayerResponse {
  gameIds: number[];
}

export const PLAYERS_PACKAGE_NAME = "players";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface PlayerServiceClient {
  createPlayer(request: CreatePlayerRequest): Observable<CreatePlayerResponse>;

  getPlayer(request: GetPlayerRequest): Observable<GetPlayerResponse>;

  getAllPlayers(request: GetAllPlayersRequest): Observable<GetAllPlayersResponse>;

  updatePlayer(request: UpdatePlayerRequest): Observable<UpdatePlayerResponse>;

  deletePlayer(request: DeletePlayerRequest): Observable<DeletePlayerResponse>;
}

export interface PlayerServiceController {
  createPlayer(
    request: CreatePlayerRequest,
  ): Promise<CreatePlayerResponse> | Observable<CreatePlayerResponse> | CreatePlayerResponse;

  getPlayer(request: GetPlayerRequest): Promise<GetPlayerResponse> | Observable<GetPlayerResponse> | GetPlayerResponse;

  getAllPlayers(
    request: GetAllPlayersRequest,
  ): Promise<GetAllPlayersResponse> | Observable<GetAllPlayersResponse> | GetAllPlayersResponse;

  updatePlayer(
    request: UpdatePlayerRequest,
  ): Promise<UpdatePlayerResponse> | Observable<UpdatePlayerResponse> | UpdatePlayerResponse;

  deletePlayer(
    request: DeletePlayerRequest,
  ): Promise<DeletePlayerResponse> | Observable<DeletePlayerResponse> | DeletePlayerResponse;
}

export function PlayerServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createPlayer", "getPlayer", "getAllPlayers", "updatePlayer", "deletePlayer"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PlayerService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PlayerService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PLAYER_SERVICE_NAME = "PlayerService";

export interface PlayerStatisticsServiceClient {
  getPlayerStatistics(request: GetPlayerStatisticsRequest): Observable<GetPlayerStatisticsResponse>;
}

export interface PlayerStatisticsServiceController {
  getPlayerStatistics(
    request: GetPlayerStatisticsRequest,
  ): Promise<GetPlayerStatisticsResponse> | Observable<GetPlayerStatisticsResponse> | GetPlayerStatisticsResponse;
}

export function PlayerStatisticsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getPlayerStatistics"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PlayerStatisticsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PlayerStatisticsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PLAYER_STATISTICS_SERVICE_NAME = "PlayerStatisticsService";

export interface PlayerAchievementServiceClient {
  getPlayerAchievementProgress(
    request: GetPlayerAchievementProgressRequest,
  ): Observable<GetPlayerAchievementProgressResponse>;

  getPlayerAllAchievements(request: GetAllPlayerAchievementsRequest): Observable<GetAllPlayerAchievementsResponse>;
}

export interface PlayerAchievementServiceController {
  getPlayerAchievementProgress(
    request: GetPlayerAchievementProgressRequest,
  ):
    | Promise<GetPlayerAchievementProgressResponse>
    | Observable<GetPlayerAchievementProgressResponse>
    | GetPlayerAchievementProgressResponse;

  getPlayerAllAchievements(
    request: GetAllPlayerAchievementsRequest,
  ):
    | Promise<GetAllPlayerAchievementsResponse>
    | Observable<GetAllPlayerAchievementsResponse>
    | GetAllPlayerAchievementsResponse;
}

export function PlayerAchievementServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getPlayerAchievementProgress", "getPlayerAllAchievements"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PlayerAchievementService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PlayerAchievementService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PLAYER_ACHIEVEMENT_SERVICE_NAME = "PlayerAchievementService";

export interface AchievementServiceClient {
  getAchievementById(request: GetAchievementByIdRequest): Observable<GetAchievementResponse>;

  getAchievementByTitle(request: GetAchievementByTitleRequest): Observable<GetAchievementResponse>;

  getAllAchievements(request: GetAllAchievementsRequest): Observable<GetAllAchievementsResponse>;
}

export interface AchievementServiceController {
  getAchievementById(
    request: GetAchievementByIdRequest,
  ): Promise<GetAchievementResponse> | Observable<GetAchievementResponse> | GetAchievementResponse;

  getAchievementByTitle(
    request: GetAchievementByTitleRequest,
  ): Promise<GetAchievementResponse> | Observable<GetAchievementResponse> | GetAchievementResponse;

  getAllAchievements(
    request: GetAllAchievementsRequest,
  ): Promise<GetAllAchievementsResponse> | Observable<GetAllAchievementsResponse> | GetAllAchievementsResponse;
}

export function AchievementServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAchievementById", "getAchievementByTitle", "getAllAchievements"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AchievementService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AchievementService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ACHIEVEMENT_SERVICE_NAME = "AchievementService";

export interface FeaturedGameServiceClient {
  addGameToFeatured(request: AddGameToFeaturedRequest): Observable<AddGameToFeaturedResponse>;

  getAllFeaturedGamesOfPlayer(
    request: GetAllFeaturedGamesOfPlayerRequest,
  ): Observable<GetAllFeaturedGamesOfPlayerResponse>;
}

export interface FeaturedGameServiceController {
  addGameToFeatured(
    request: AddGameToFeaturedRequest,
  ): Promise<AddGameToFeaturedResponse> | Observable<AddGameToFeaturedResponse> | AddGameToFeaturedResponse;

  getAllFeaturedGamesOfPlayer(
    request: GetAllFeaturedGamesOfPlayerRequest,
  ):
    | Promise<GetAllFeaturedGamesOfPlayerResponse>
    | Observable<GetAllFeaturedGamesOfPlayerResponse>
    | GetAllFeaturedGamesOfPlayerResponse;
}

export function FeaturedGameServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["addGameToFeatured", "getAllFeaturedGamesOfPlayer"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("FeaturedGameService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("FeaturedGameService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const FEATURED_GAME_SERVICE_NAME = "FeaturedGameService";
